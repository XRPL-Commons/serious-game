name: Deploy Node Application

on:
  push:
    branches:
      - dev # or any other branch you use for production releases
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Remove package.lock
        run: rm package-lock.json

      - name: Install dependencies
        run: npm install

      - name: Create env file
        run: |
          echo "${{ secrets.ENV_CONTENT }}" > ./.env
        shell: bash

      - name: Build Application
        run: npm run build

      - name: Create env file from secret
      # echo "${{ secrets.ENV_CONTENT }}" | base64 --decode > .output/server/.env
        run: |
          echo "${{ secrets.ENV_CONTENT }}" > .output/server/.env
        shell: bash

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ANSIBLE_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Disable strict host key checking
        run: echo "StrictHostKeyChecking no" >> ~/.ssh/config
        shell: bash
      
      - name: Create albers.app.service.tmp
        run: |
          cat <<EOF > albers.app.service.tmp
          [Unit]
          Description=Albers Application Service
          After=syslog.target network.target
      
          [Service]
          Type=simple
          ExecStart=/usr/bin/node --env-file=.env index.mjs
          WorkingDirectory=/var/opt/albers/server
          KillSignal=SIGTERM
          User=nodejs
          Group=nodejs
          Restart=always
          RestartSec=10
          StandardOutput=journal
          StandardError=journal
          SyslogIdentifier=albers.app
      
          [Install]
          WantedBy=multi-user.target
          EOF
        shell: bash
      

      - name: Upload albers.app.service.tmp to remote tmp
        run: scp -i ~/.ssh/id_rsa albers.app.service.tmp ${{ secrets.ANSIBLE_SSH_USER_NAME }}@${{ secrets.DEV_TARGET_HOST }}:/tmp/albers.app.service
        shell: bash

      - name: Check if albers.app.service exists or is different
        run: |
            ssh -i ~/.ssh/id_rsa ${{ secrets.ANSIBLE_SSH_USER_NAME }}@${{ secrets.DEV_TARGET_HOST }} 'if ! cmp -s /tmp/albers.app.service.tmp /etc/systemd/system/albers.app.service; then
            sudo mv /tmp/albers.app.service /etc/systemd/system/albers.app.service
            sudo systemctl daemon-reload
            fi'
        shell: bash
        
      - name: Archive .output directory contents
        run: tar -czvf output.tar.gz -C .output .
        shell: bash

      - name: Create albers_new directory
        run: ssh -i ~/.ssh/id_rsa ${{ secrets.ANSIBLE_SSH_USER_NAME }}@${{ secrets.DEV_TARGET_HOST }} 'sudo mkdir -p /var/opt/albers_new'
        shell: bash

      - name: Change ownership and permissions of albers_new directory
        run: ssh -i ~/.ssh/id_rsa ${{ secrets.ANSIBLE_SSH_USER_NAME }}@${{ secrets.DEV_TARGET_HOST }} 'sudo chown -R nodejs:nodejs /var/opt/albers_new && sudo chmod -R 0775 /var/opt/albers_new'
        shell: bash

      - name: Securely copy build directory to remote
        run: scp -i ~/.ssh/id_rsa output.tar.gz ${{ secrets.ANSIBLE_SSH_USER_NAME }}@${{ secrets.DEV_TARGET_HOST }}:/var/opt/albers_new
        shell: bash

      - name: Extract build directory on remote
        run: ssh -i ~/.ssh/id_rsa ${{ secrets.ANSIBLE_SSH_USER_NAME }}@${{ secrets.DEV_TARGET_HOST }} 'sudo -u nodejs tar -xzvf /var/opt/albers_new/output.tar.gz -C /var/opt/albers_new'
        shell: bash

      - name: Change ownership of all files to nodejs:nodejs
        run: ssh -i ~/.ssh/id_rsa ${{ secrets.ANSIBLE_SSH_USER_NAME }}@${{ secrets.DEV_TARGET_HOST }} 'sudo chown -R nodejs:nodejs /var/opt/albers_new'
        shell: bash

      - name: Switch directories
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.ANSIBLE_SSH_USER_NAME }}@${{ secrets.DEV_TARGET_HOST }} 'sudo rm -rf /var/opt/albers_old'
          ssh -i ~/.ssh/id_rsa ${{ secrets.ANSIBLE_SSH_USER_NAME }}@${{ secrets.DEV_TARGET_HOST }} 'sudo mv /var/opt/albers /var/opt/albers_old'
          ssh -i ~/.ssh/id_rsa ${{ secrets.ANSIBLE_SSH_USER_NAME }}@${{ secrets.DEV_TARGET_HOST }} 'sudo mv /var/opt/albers_new /var/opt/albers'
        shell: bash

      - name: Start the application
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.ANSIBLE_SSH_USER_NAME }}@${{ secrets.DEV_TARGET_HOST }} 'sudo systemctl restart albers.app'
        shell: bash